// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LogRebase extends ethereum.Event {
  get params(): LogRebase__Params {
    return new LogRebase__Params(this);
  }
}

export class LogRebase__Params {
  _event: LogRebase;

  constructor(event: LogRebase) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetAutomatedMarketMakerPair extends ethereum.Event {
  get params(): SetAutomatedMarketMakerPair__Params {
    return new SetAutomatedMarketMakerPair__Params(this);
  }
}

export class SetAutomatedMarketMakerPair__Params {
  _event: SetAutomatedMarketMakerPair;

  constructor(event: SetAutomatedMarketMakerPair) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  AutoReward(): boolean {
    let result = super.call("AutoReward", "AutoReward():(bool)", []);

    return result[0].toBoolean();
  }

  try_AutoReward(): ethereum.CallResult<boolean> {
    let result = super.tryCall("AutoReward", "AutoReward():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  DeveloperWallet(): Address {
    let result = super.call(
      "DeveloperWallet",
      "DeveloperWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_DeveloperWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "DeveloperWallet",
      "DeveloperWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  Downlines(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "Downlines",
      "Downlines(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_Downlines(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "Downlines",
      "Downlines(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAX_UINT256(): BigInt {
    let result = super.call("MAX_UINT256", "MAX_UINT256():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_UINT256(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_UINT256", "MAX_UINT256():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MarketingWallet(): Address {
    let result = super.call(
      "MarketingWallet",
      "MarketingWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_MarketingWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MarketingWallet",
      "MarketingWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OceansDividendReceiver(): Address {
    let result = super.call(
      "OceansDividendReceiver",
      "OceansDividendReceiver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_OceansDividendReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "OceansDividendReceiver",
      "OceansDividendReceiver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  OriginBlaclist(param0: Address): boolean {
    let result = super.call(
      "OriginBlaclist",
      "OriginBlaclist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_OriginBlaclist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "OriginBlaclist",
      "OriginBlaclist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  RewardDistributor(param0: Address): boolean {
    let result = super.call(
      "RewardDistributor",
      "RewardDistributor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_RewardDistributor(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "RewardDistributor",
      "RewardDistributor(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _autoLiquidity(): boolean {
    let result = super.call("_autoLiquidity", "_autoLiquidity():(bool)", []);

    return result[0].toBoolean();
  }

  try__autoLiquidity(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_autoLiquidity", "_autoLiquidity():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _autoRebase(): boolean {
    let result = super.call("_autoRebase", "_autoRebase():(bool)", []);

    return result[0].toBoolean();
  }

  try__autoRebase(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_autoRebase", "_autoRebase():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _buyDevFee(): BigInt {
    let result = super.call("_buyDevFee", "_buyDevFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try__buyDevFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_buyDevFee", "_buyDevFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _buyLiquidity(): BigInt {
    let result = super.call("_buyLiquidity", "_buyLiquidity():(uint256)", []);

    return result[0].toBigInt();
  }

  try__buyLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_buyLiquidity",
      "_buyLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _buyMarketing(): BigInt {
    let result = super.call("_buyMarketing", "_buyMarketing():(uint256)", []);

    return result[0].toBigInt();
  }

  try__buyMarketing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_buyMarketing",
      "_buyMarketing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _buyRewards(): BigInt {
    let result = super.call("_buyRewards", "_buyRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try__buyRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_buyRewards", "_buyRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _markerPairs(param0: BigInt): Address {
    let result = super.call("_markerPairs", "_markerPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__markerPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_markerPairs",
      "_markerPairs(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _sellDevFee(): BigInt {
    let result = super.call("_sellDevFee", "_sellDevFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try__sellDevFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_sellDevFee", "_sellDevFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _sellLiquidity(): BigInt {
    let result = super.call("_sellLiquidity", "_sellLiquidity():(uint256)", []);

    return result[0].toBigInt();
  }

  try__sellLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_sellLiquidity",
      "_sellLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _sellMarketing(): BigInt {
    let result = super.call("_sellMarketing", "_sellMarketing():(uint256)", []);

    return result[0].toBigInt();
  }

  try__sellMarketing(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_sellMarketing",
      "_sellMarketing():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _sellRewards(): BigInt {
    let result = super.call("_sellRewards", "_sellRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try__sellRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_sellRewards", "_sellRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner_: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    owner_: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner_), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedContracts(param0: Address): boolean {
    let result = super.call(
      "allowedContracts",
      "allowedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_allowedContracts(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedContracts",
      "allowedContracts(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  antiBotEnabled(): boolean {
    let result = super.call("antiBotEnabled", "antiBotEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_antiBotEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("antiBotEnabled", "antiBotEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  automatedMarketMakerPairs(param0: Address): boolean {
    let result = super.call(
      "automatedMarketMakerPairs",
      "automatedMarketMakerPairs(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_automatedMarketMakerPairs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "automatedMarketMakerPairs",
      "automatedMarketMakerPairs(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklist(param0: Address): boolean {
    let result = super.call("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_blacklist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("blacklist", "blacklist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkFeeExempt(_addr: Address): boolean {
    let result = super.call(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBoolean();
  }

  try_checkFeeExempt(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkFeeExempt",
      "checkFeeExempt(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  downlineLookupUpline(param0: Address): Address {
    let result = super.call(
      "downlineLookupUpline",
      "downlineLookupUpline(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_downlineLookupUpline(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "downlineLookupUpline",
      "downlineLookupUpline(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeDenominator(): BigInt {
    let result = super.call("feeDenominator", "feeDenominator():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeDenominator",
      "feeDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCirculatingSupply(): BigInt {
    let result = super.call(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCirculatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDownlines(sender: Address): Array<Address> {
    let result = super.call(
      "getDownlines",
      "getDownlines(address):(address[])",
      [ethereum.Value.fromAddress(sender)]
    );

    return result[0].toAddressArray();
  }

  try_getDownlines(sender: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDownlines",
      "getDownlines(address):(address[])",
      [ethereum.Value.fromAddress(sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getReferralTotalFee(receiver: Address): BigInt {
    let result = super.call(
      "getReferralTotalFee",
      "getReferralTotalFee(address):(uint256)",
      [ethereum.Value.fromAddress(receiver)]
    );

    return result[0].toBigInt();
  }

  try_getReferralTotalFee(receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReferralTotalFee",
      "getReferralTotalFee(address):(uint256)",
      [ethereum.Value.fromAddress(receiver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalUpline(): BigInt {
    let result = super.call("getTotalUpline", "getTotalUpline():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTotalUpline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalUpline",
      "getTotalUpline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUpline(sender: Address): Address {
    let result = super.call("getUpline", "getUpline(address):(address)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toAddress();
  }

  try_getUpline(sender: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getUpline", "getUpline(address):(address)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUplineAddressByIndex(iIndex: BigInt): Address {
    let result = super.call(
      "getUplineAddressByIndex",
      "getUplineAddressByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(iIndex)]
    );

    return result[0].toAddress();
  }

  try_getUplineAddressByIndex(iIndex: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUplineAddressByIndex",
      "getUplineAddressByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(iIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gonSwapThreshold(): BigInt {
    let result = super.call(
      "gonSwapThreshold",
      "gonSwapThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gonSwapThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gonSwapThreshold",
      "gonSwapThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  iTotalUplines(): BigInt {
    let result = super.call("iTotalUplines", "iTotalUplines():(uint256)", []);

    return result[0].toBigInt();
  }

  try_iTotalUplines(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "iTotalUplines",
      "iTotalUplines():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initalDistribution(): boolean {
    let result = super.call(
      "initalDistribution",
      "initalDistribution():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_initalDistribution(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initalDistribution",
      "initalDistribution():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isContract(account: Address): boolean {
    let result = super.call("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isContract(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isContract", "isContract(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDividendExempt(param0: Address): boolean {
    let result = super.call(
      "isDividendExempt",
      "isDividendExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isDividendExempt(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDividendExempt",
      "isDividendExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextRebase(): BigInt {
    let result = super.call("nextRebase", "nextRebase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextRebase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextRebase", "nextRebase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nexthalving(): BigInt {
    let result = super.call("nexthalving", "nexthalving():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nexthalving(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nexthalving", "nexthalving():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pinkAntiBot(): Address {
    let result = super.call("pinkAntiBot", "pinkAntiBot():(address)", []);

    return result[0].toAddress();
  }

  try_pinkAntiBot(): ethereum.CallResult<Address> {
    let result = super.tryCall("pinkAntiBot", "pinkAntiBot():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rebaseFrequency(): BigInt {
    let result = super.call(
      "rebaseFrequency",
      "rebaseFrequency():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebaseFrequency(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebaseFrequency",
      "rebaseFrequency():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referee(): BigInt {
    let result = super.call("referee", "referee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("referee", "referee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralCount(param0: Address): BigInt {
    let result = super.call(
      "referralCount",
      "referralCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralCount",
      "referralCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralTotalFeeReceived(param0: Address): BigInt {
    let result = super.call(
      "referralTotalFeeReceived",
      "referralTotalFeeReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralTotalFeeReceived(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralTotalFeeReceived",
      "referralTotalFeeReceived(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrer(): BigInt {
    let result = super.call("referrer", "referrer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_referrer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("referrer", "referrer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rescueToken(tokenAddress: Address, tokens: BigInt): boolean {
    let result = super.call(
      "rescueToken",
      "rescueToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_rescueToken(
    tokenAddress: Address,
    tokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rescueToken",
      "rescueToken(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rewardYield(): BigInt {
    let result = super.call("rewardYield", "rewardYield():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardYield(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardYield", "rewardYield():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardYieldDenominator(): BigInt {
    let result = super.call(
      "rewardYieldDenominator",
      "rewardYieldDenominator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardYieldDenominator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardYieldDenominator",
      "rewardYieldDenominator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uplineList(param0: BigInt): Address {
    let result = super.call("uplineList", "uplineList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_uplineList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("uplineList", "uplineList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DividendRescueTokenCall extends ethereum.Call {
  get inputs(): DividendRescueTokenCall__Inputs {
    return new DividendRescueTokenCall__Inputs(this);
  }

  get outputs(): DividendRescueTokenCall__Outputs {
    return new DividendRescueTokenCall__Outputs(this);
  }
}

export class DividendRescueTokenCall__Inputs {
  _call: DividendRescueTokenCall;

  constructor(call: DividendRescueTokenCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DividendRescueTokenCall__Outputs {
  _call: DividendRescueTokenCall;

  constructor(call: DividendRescueTokenCall) {
    this._call = call;
  }
}

export class SETWallCall extends ethereum.Call {
  get inputs(): SETWallCall__Inputs {
    return new SETWallCall__Inputs(this);
  }

  get outputs(): SETWallCall__Outputs {
    return new SETWallCall__Outputs(this);
  }
}

export class SETWallCall__Inputs {
  _call: SETWallCall;

  constructor(call: SETWallCall) {
    this._call = call;
  }

  get _wall(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SETWallCall__Outputs {
  _call: SETWallCall;

  constructor(call: SETWallCall) {
    this._call = call;
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get uplineAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get downlineAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class AddReferralFeeCall extends ethereum.Call {
  get inputs(): AddReferralFeeCall__Inputs {
    return new AddReferralFeeCall__Inputs(this);
  }

  get outputs(): AddReferralFeeCall__Outputs {
    return new AddReferralFeeCall__Outputs(this);
  }
}

export class AddReferralFeeCall__Inputs {
  _call: AddReferralFeeCall;

  constructor(call: AddReferralFeeCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddReferralFeeCall__Outputs {
  _call: AddReferralFeeCall;

  constructor(call: AddReferralFeeCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveReferralCall extends ethereum.Call {
  get inputs(): ApproveReferralCall__Inputs {
    return new ApproveReferralCall__Inputs(this);
  }

  get outputs(): ApproveReferralCall__Outputs {
    return new ApproveReferralCall__Outputs(this);
  }
}

export class ApproveReferralCall__Inputs {
  _call: ApproveReferralCall;

  constructor(call: ApproveReferralCall) {
    this._call = call;
  }

  get uplineAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveReferralCall__Outputs {
  _call: ApproveReferralCall;

  constructor(call: ApproveReferralCall) {
    this._call = call;
  }
}

export class ChangeDividendTokenCall extends ethereum.Call {
  get inputs(): ChangeDividendTokenCall__Inputs {
    return new ChangeDividendTokenCall__Inputs(this);
  }

  get outputs(): ChangeDividendTokenCall__Outputs {
    return new ChangeDividendTokenCall__Outputs(this);
  }
}

export class ChangeDividendTokenCall__Inputs {
  _call: ChangeDividendTokenCall;

  constructor(call: ChangeDividendTokenCall) {
    this._call = call;
  }

  get _newToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDividendTokenCall__Outputs {
  _call: ChangeDividendTokenCall;

  constructor(call: ChangeDividendTokenCall) {
    this._call = call;
  }
}

export class ClearStuckBalanceCall extends ethereum.Call {
  get inputs(): ClearStuckBalanceCall__Inputs {
    return new ClearStuckBalanceCall__Inputs(this);
  }

  get outputs(): ClearStuckBalanceCall__Outputs {
    return new ClearStuckBalanceCall__Outputs(this);
  }
}

export class ClearStuckBalanceCall__Inputs {
  _call: ClearStuckBalanceCall;

  constructor(call: ClearStuckBalanceCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClearStuckBalanceCall__Outputs {
  _call: ClearStuckBalanceCall;

  constructor(call: ClearStuckBalanceCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnableDisableAntiBotCall extends ethereum.Call {
  get inputs(): EnableDisableAntiBotCall__Inputs {
    return new EnableDisableAntiBotCall__Inputs(this);
  }

  get outputs(): EnableDisableAntiBotCall__Outputs {
    return new EnableDisableAntiBotCall__Outputs(this);
  }
}

export class EnableDisableAntiBotCall__Inputs {
  _call: EnableDisableAntiBotCall;

  constructor(call: EnableDisableAntiBotCall) {
    this._call = call;
  }

  get _value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableDisableAntiBotCall__Outputs {
  _call: EnableDisableAntiBotCall;

  constructor(call: EnableDisableAntiBotCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ManualRebaseCall extends ethereum.Call {
  get inputs(): ManualRebaseCall__Inputs {
    return new ManualRebaseCall__Inputs(this);
  }

  get outputs(): ManualRebaseCall__Outputs {
    return new ManualRebaseCall__Outputs(this);
  }
}

export class ManualRebaseCall__Inputs {
  _call: ManualRebaseCall;

  constructor(call: ManualRebaseCall) {
    this._call = call;
  }
}

export class ManualRebaseCall__Outputs {
  _call: ManualRebaseCall;

  constructor(call: ManualRebaseCall) {
    this._call = call;
  }
}

export class ManualSyncCall extends ethereum.Call {
  get inputs(): ManualSyncCall__Inputs {
    return new ManualSyncCall__Inputs(this);
  }

  get outputs(): ManualSyncCall__Outputs {
    return new ManualSyncCall__Outputs(this);
  }
}

export class ManualSyncCall__Inputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class ManualSyncCall__Outputs {
  _call: ManualSyncCall;

  constructor(call: ManualSyncCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueTokenCall extends ethereum.Call {
  get inputs(): RescueTokenCall__Inputs {
    return new RescueTokenCall__Inputs(this);
  }

  get outputs(): RescueTokenCall__Outputs {
    return new RescueTokenCall__Outputs(this);
  }
}

export class RescueTokenCall__Inputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueTokenCall__Outputs {
  _call: RescueTokenCall;

  constructor(call: RescueTokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetAllowTransferCall extends ethereum.Call {
  get inputs(): SetAllowTransferCall__Inputs {
    return new SetAllowTransferCall__Inputs(this);
  }

  get outputs(): SetAllowTransferCall__Outputs {
    return new SetAllowTransferCall__Outputs(this);
  }
}

export class SetAllowTransferCall__Inputs {
  _call: SetAllowTransferCall;

  constructor(call: SetAllowTransferCall) {
    this._call = call;
  }

  get _adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAllowTransferCall__Outputs {
  _call: SetAllowTransferCall;

  constructor(call: SetAllowTransferCall) {
    this._call = call;
  }
}

export class SetAutoRebaseCall extends ethereum.Call {
  get inputs(): SetAutoRebaseCall__Inputs {
    return new SetAutoRebaseCall__Inputs(this);
  }

  get outputs(): SetAutoRebaseCall__Outputs {
    return new SetAutoRebaseCall__Outputs(this);
  }
}

export class SetAutoRebaseCall__Inputs {
  _call: SetAutoRebaseCall;

  constructor(call: SetAutoRebaseCall) {
    this._call = call;
  }

  get AuRebase(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAutoRebaseCall__Outputs {
  _call: SetAutoRebaseCall;

  constructor(call: SetAutoRebaseCall) {
    this._call = call;
  }
}

export class SetAutomatedMarketMakerPairCall extends ethereum.Call {
  get inputs(): SetAutomatedMarketMakerPairCall__Inputs {
    return new SetAutomatedMarketMakerPairCall__Inputs(this);
  }

  get outputs(): SetAutomatedMarketMakerPairCall__Outputs {
    return new SetAutomatedMarketMakerPairCall__Outputs(this);
  }
}

export class SetAutomatedMarketMakerPairCall__Inputs {
  _call: SetAutomatedMarketMakerPairCall;

  constructor(call: SetAutomatedMarketMakerPairCall) {
    this._call = call;
  }

  get _pair(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAutomatedMarketMakerPairCall__Outputs {
  _call: SetAutomatedMarketMakerPairCall;

  constructor(call: SetAutomatedMarketMakerPairCall) {
    this._call = call;
  }
}

export class SetBotBlacklistCall extends ethereum.Call {
  get inputs(): SetBotBlacklistCall__Inputs {
    return new SetBotBlacklistCall__Inputs(this);
  }

  get outputs(): SetBotBlacklistCall__Outputs {
    return new SetBotBlacklistCall__Outputs(this);
  }
}

export class SetBotBlacklistCall__Inputs {
  _call: SetBotBlacklistCall;

  constructor(call: SetBotBlacklistCall) {
    this._call = call;
  }

  get _botAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _flag(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBotBlacklistCall__Outputs {
  _call: SetBotBlacklistCall;

  constructor(call: SetBotBlacklistCall) {
    this._call = call;
  }
}

export class SetBuyTaxCall extends ethereum.Call {
  get inputs(): SetBuyTaxCall__Inputs {
    return new SetBuyTaxCall__Inputs(this);
  }

  get outputs(): SetBuyTaxCall__Outputs {
    return new SetBuyTaxCall__Outputs(this);
  }
}

export class SetBuyTaxCall__Inputs {
  _call: SetBuyTaxCall;

  constructor(call: SetBuyTaxCall) {
    this._call = call;
  }

  get _liq(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _marketing(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _Reward(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _dev(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetBuyTaxCall__Outputs {
  _call: SetBuyTaxCall;

  constructor(call: SetBuyTaxCall) {
    this._call = call;
  }
}

export class SetInitailDistributionCall extends ethereum.Call {
  get inputs(): SetInitailDistributionCall__Inputs {
    return new SetInitailDistributionCall__Inputs(this);
  }

  get outputs(): SetInitailDistributionCall__Outputs {
    return new SetInitailDistributionCall__Outputs(this);
  }
}

export class SetInitailDistributionCall__Inputs {
  _call: SetInitailDistributionCall;

  constructor(call: SetInitailDistributionCall) {
    this._call = call;
  }

  get _status(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetInitailDistributionCall__Outputs {
  _call: SetInitailDistributionCall;

  constructor(call: SetInitailDistributionCall) {
    this._call = call;
  }
}

export class SetIsDividendExemptCall extends ethereum.Call {
  get inputs(): SetIsDividendExemptCall__Inputs {
    return new SetIsDividendExemptCall__Inputs(this);
  }

  get outputs(): SetIsDividendExemptCall__Outputs {
    return new SetIsDividendExemptCall__Outputs(this);
  }
}

export class SetIsDividendExemptCall__Inputs {
  _call: SetIsDividendExemptCall;

  constructor(call: SetIsDividendExemptCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exempt(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsDividendExemptCall__Outputs {
  _call: SetIsDividendExemptCall;

  constructor(call: SetIsDividendExemptCall) {
    this._call = call;
  }
}

export class SetNextRebaseCall extends ethereum.Call {
  get inputs(): SetNextRebaseCall__Inputs {
    return new SetNextRebaseCall__Inputs(this);
  }

  get outputs(): SetNextRebaseCall__Outputs {
    return new SetNextRebaseCall__Outputs(this);
  }
}

export class SetNextRebaseCall__Inputs {
  _call: SetNextRebaseCall;

  constructor(call: SetNextRebaseCall) {
    this._call = call;
  }

  get _nextRebase(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNextRebaseCall__Outputs {
  _call: SetNextRebaseCall;

  constructor(call: SetNextRebaseCall) {
    this._call = call;
  }
}

export class SetOriginBlacklistCall extends ethereum.Call {
  get inputs(): SetOriginBlacklistCall__Inputs {
    return new SetOriginBlacklistCall__Inputs(this);
  }

  get outputs(): SetOriginBlacklistCall__Outputs {
    return new SetOriginBlacklistCall__Outputs(this);
  }
}

export class SetOriginBlacklistCall__Inputs {
  _call: SetOriginBlacklistCall;

  constructor(call: SetOriginBlacklistCall) {
    this._call = call;
  }

  get _adr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOriginBlacklistCall__Outputs {
  _call: SetOriginBlacklistCall;

  constructor(call: SetOriginBlacklistCall) {
    this._call = call;
  }
}

export class SetRebaseFrequencyCall extends ethereum.Call {
  get inputs(): SetRebaseFrequencyCall__Inputs {
    return new SetRebaseFrequencyCall__Inputs(this);
  }

  get outputs(): SetRebaseFrequencyCall__Outputs {
    return new SetRebaseFrequencyCall__Outputs(this);
  }
}

export class SetRebaseFrequencyCall__Inputs {
  _call: SetRebaseFrequencyCall;

  constructor(call: SetRebaseFrequencyCall) {
    this._call = call;
  }

  get _rebaseFrequency(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebaseFrequencyCall__Outputs {
  _call: SetRebaseFrequencyCall;

  constructor(call: SetRebaseFrequencyCall) {
    this._call = call;
  }
}

export class SetRebaseSyncCall extends ethereum.Call {
  get inputs(): SetRebaseSyncCall__Inputs {
    return new SetRebaseSyncCall__Inputs(this);
  }

  get outputs(): SetRebaseSyncCall__Outputs {
    return new SetRebaseSyncCall__Outputs(this);
  }
}

export class SetRebaseSyncCall__Inputs {
  _call: SetRebaseSyncCall;

  constructor(call: SetRebaseSyncCall) {
    this._call = call;
  }

  get _status(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetRebaseSyncCall__Outputs {
  _call: SetRebaseSyncCall;

  constructor(call: SetRebaseSyncCall) {
    this._call = call;
  }
}

export class SetReferralCommissionCall extends ethereum.Call {
  get inputs(): SetReferralCommissionCall__Inputs {
    return new SetReferralCommissionCall__Inputs(this);
  }

  get outputs(): SetReferralCommissionCall__Outputs {
    return new SetReferralCommissionCall__Outputs(this);
  }
}

export class SetReferralCommissionCall__Inputs {
  _call: SetReferralCommissionCall;

  constructor(call: SetReferralCommissionCall) {
    this._call = call;
  }

  get _refeem(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _refer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetReferralCommissionCall__Outputs {
  _call: SetReferralCommissionCall;

  constructor(call: SetReferralCommissionCall) {
    this._call = call;
  }
}

export class SetRewardYieldCall extends ethereum.Call {
  get inputs(): SetRewardYieldCall__Inputs {
    return new SetRewardYieldCall__Inputs(this);
  }

  get outputs(): SetRewardYieldCall__Outputs {
    return new SetRewardYieldCall__Outputs(this);
  }
}

export class SetRewardYieldCall__Inputs {
  _call: SetRewardYieldCall;

  constructor(call: SetRewardYieldCall) {
    this._call = call;
  }

  get _rewardYield(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rewardYieldDenominator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRewardYieldCall__Outputs {
  _call: SetRewardYieldCall;

  constructor(call: SetRewardYieldCall) {
    this._call = call;
  }
}

export class SetSellTaxCall extends ethereum.Call {
  get inputs(): SetSellTaxCall__Inputs {
    return new SetSellTaxCall__Inputs(this);
  }

  get outputs(): SetSellTaxCall__Outputs {
    return new SetSellTaxCall__Outputs(this);
  }
}

export class SetSellTaxCall__Inputs {
  _call: SetSellTaxCall;

  constructor(call: SetSellTaxCall) {
    this._call = call;
  }

  get _liq(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _marketing(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _Reward(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _dev(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetSellTaxCall__Outputs {
  _call: SetSellTaxCall;

  constructor(call: SetSellTaxCall) {
    this._call = call;
  }
}

export class SetSwapThresholdCall extends ethereum.Call {
  get inputs(): SetSwapThresholdCall__Inputs {
    return new SetSwapThresholdCall__Inputs(this);
  }

  get outputs(): SetSwapThresholdCall__Outputs {
    return new SetSwapThresholdCall__Outputs(this);
  }
}

export class SetSwapThresholdCall__Inputs {
  _call: SetSwapThresholdCall;

  constructor(call: SetSwapThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapThresholdCall__Outputs {
  _call: SetSwapThresholdCall;

  constructor(call: SetSwapThresholdCall) {
    this._call = call;
  }
}

export class SetWhitelistCall extends ethereum.Call {
  get inputs(): SetWhitelistCall__Inputs {
    return new SetWhitelistCall__Inputs(this);
  }

  get outputs(): SetWhitelistCall__Outputs {
    return new SetWhitelistCall__Outputs(this);
  }
}

export class SetWhitelistCall__Inputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhitelistCall__Outputs {
  _call: SetWhitelistCall;

  constructor(call: SetWhitelistCall) {
    this._call = call;
  }
}

export class SnipedCall extends ethereum.Call {
  get inputs(): SnipedCall__Inputs {
    return new SnipedCall__Inputs(this);
  }

  get outputs(): SnipedCall__Outputs {
    return new SnipedCall__Outputs(this);
  }
}

export class SnipedCall__Inputs {
  _call: SnipedCall;

  constructor(call: SnipedCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SnipedCall__Outputs {
  _call: SnipedCall;

  constructor(call: SnipedCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
